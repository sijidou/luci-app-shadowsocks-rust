#!/bin/sh /etc/rc.common
#
# Copyright (C) 2014-2022 Jian Chang <aa65535@live.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=90
STOP=15
USE_PROCD=1
NAME=shadowsocks
if type extra_command >/dev/null 2>&1; then
	extra_command "rules" "Reload transparent proxy rules"
else
	EXTRA_COMMANDS="rules"
fi

uci_get_by_name() {
	local ret=$(uci get $NAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_get_by_type() {
	local ret=$(uci get $NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_bool_by_name() {
	case "$(uci_get_by_name $1 $2)" in
		1|on|true|yes|enabled) return 0;;
	esac
	return 1
}

validate_server() {
	[ "$(uci get $NAME.$1 2>/dev/null)" = "servers" ]
}

get_num_processes() {
    local cores=$(grep 'processor' /proc/cpuinfo | wc -l)
    local processes=$(uci_get_by_type $1 processes $cores)
    [ "$processes" = "0" ] && echo $cores || echo $processes
}

gen_config_file() {
	json_init

	json_add_array "servers"
	json_add_object
	json_add_string "server" "$(uci_get_by_name $1 server)"
	json_add_int "server_port" $(uci_get_by_name $1 server_port)
	json_add_string "method" "$(uci_get_by_name $1 encrypt_method)"
	json_add_string "password" "$(uci_get_by_name $1 password)"
	json_add_string "mode" "tcp_and_udp"
	json_close_object
	json_close_array

	json_add_array "locals"
	json_add_object
	json_add_string "local_address" "::"
	json_add_int "local_port" $(uci_get_by_type transparent_proxy local_port 1234)
	json_add_string "protocol" "redir"
	json_add_string "tcp_redir" "redirect"
	json_add_string "udp_redir" "tproxy"
	json_add_string "mode" "tcp_and_udp"
	json_close_object
	
	json_add_object
	json_add_string "local_address" "::"
	json_add_int "local_port" 533
	json_add_string "protocol" "dns"
	json_add_string "local_dns_address" "223.5.5.5"
	json_add_int "local_dns_port" 53
	json_add_string "remote_dns_address" "8.8.8.8"
	json_add_int "remote_dns_port" 53
	json_add_string "mode" "tcp_and_udp"
	json_add_string "acl" "/etc/shadowsocks.acl"
	json_add_int "client_cache_size" 0
	json_close_object

	json_add_object
	json_add_string "local_address" "::"
	json_add_int "local_port" 1080
	json_add_string "mode" "tcp_and_udp"
	json_close_object

	json_close_array

	json_add_boolean "ipv6_first" 1
	json_add_int "nofile" 51200
	json_add_int "timeout" $(uci_get_by_name $1 timeout 60)
	json_add_boolean "fast_open" $(uci_get_by_name $1 fast_open)
	json_add_boolean "no_delay" $(uci_get_by_name $1 no_delay)
	json_add_boolean "mptcp" 1
	json_close_object
	json_dump -i >/var/etc/$NAME.$1.json
}

procd_common_param() {
	procd_set_param nice -5
	procd_set_param limits nofile="51200 51200"
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_close_instance
}

procd_append_bool_by_uci_name() {
	uci_bool_by_name $2 $3 && procd_append_param command $1
}

start_rules() {
	get_arg_udp() {
		local server=$(uci_get_by_type transparent_proxy udp_relay_server)
		[ "$server" = "same" ] || validate_server $server && echo "-u"
	}

	get_arg_out() {
		case "$(uci_get_by_type access_control self_proxy 1)" in
			1) echo "-o";;
			2) echo "-O";;
		esac
	}

	get_server_ips() {
		echo $(uci_get_by_name $1 server)
	}

	get_lan_hosts() {
		uci_bool_by_name $1 enable && echo "$(uci_get_by_name $1 type),$(uci_get_by_name $1 host)"
	}

	config_load $NAME
	/usr/bin/ss-rules $(get_arg_out) $(get_arg_udp) \
		-s "$(echo $(config_foreach get_server_ips servers | sort -u))" \
		-l "$(uci_get_by_type transparent_proxy local_port 1234)" \
		-B "$(uci_get_by_type access_control wan_bp_list)" \
		-b "$(uci_get_by_type access_control wan_bp_ips)" \
		-W "$(uci_get_by_type access_control wan_fw_list)" \
		-w "$(uci_get_by_type access_control wan_fw_ips)" \
		-I "$(uci_get_by_type access_control lan_ifaces)" \
		-d "$(uci_get_by_type access_control lan_target)" \
		-a "$(echo $(config_foreach get_lan_hosts lan_hosts))" \
		-e "$(uci_get_by_type access_control ipt_ext)"
}

start_redir() {
    local prog="ss-redir"
    local num_processes=$(get_num_processes transparent_proxy)
    command -v $prog >/dev/null 2>&1 || return 0
    procd_open_instance ss-redir$4-$2
    procd_set_param command $prog -c /var/etc/$NAME.$1.json
    procd_append_param command --worker-threads "$num_processes"
    procd_set_param pidfile /var/run/ss-redir$4-$1-$2.pid
    procd_common_param
}

ss_redir() {
    local main_server=$(uci_get_by_type transparent_proxy main_server)
    validate_server $main_server || return 0
    gen_config_file $main_server
    local i=1
    start_redir $main_server $i
    start_rules || /usr/bin/ss-rules -f
}

service_triggers() {
	procd_add_reload_trigger $NAME
}

start_service() {
	mkdir -p /var/etc
	ss_redir
}

stop_service() {
	/usr/bin/ss-rules -f
}

rules() {
	local running=$(ubus call service list '{"name":"'$NAME'"}' | jsonfilter -l 1 -e "@.$NAME.instances['ss-redir-1'].running")
	[ "$running" = "true" ] || return 0
	start_rules || /usr/bin/ss-rules -f
}

boot() {
	local delay=$(uci_get_by_type general startup_delay 0)
	(sleep $delay && start >/dev/null 2>&1) &
	return 0
}

reload_service() {
	stop
	sleep 2
	start
}
